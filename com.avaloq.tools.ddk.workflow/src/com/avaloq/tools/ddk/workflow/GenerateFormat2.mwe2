module com.avaloq.tools.ddk.xtext.GenerateFormat2

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
import org.eclipse.emf.mwe.utils.*

import com.avaloq.tools.ddk.xtext.generator.*
import com.avaloq.tools.ddk.xtext.generator.model.project.*

var baseName = "com.avaloq.tools.ddk.xtext.format2"
var rootPath = ".."
var runtimeProject = "${rootPath}/${baseName}"

Workflow {
    bean = StandaloneSetup {
        scanClassPath = true
        platformUri = "${runtimeProject}/.."
        registerGeneratedEPackage = "org.eclipse.xtext.xbase.XbasePackage"
        registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
        registerGenModelFile = "platform:/resource/org.eclipse.xtext/org/eclipse/xtext/Xtext.genmodel"
        registerGenModelFile = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel"
    }

  component = XtextGenerator {
    configuration = CustomGeneratorModule {
      project = CustomProjectConfig {
        baseName = baseName
        rootPath = rootPath
        createEclipseMetaData = true
        runtimeTest = {
          enabled = true
        }
        eclipsePlugin = {
          enabled = true
        }
        eclipsePluginTest = {
          enabled = true
        }
        genericIde = {
          enabled = true
        }
      }
      code = {
        encoding = "UTF-8"
        lineDelimiter = "\r\n"
        fileHeader = "/*\n * generated by Xtext \${version}\n */"
      }
    }
    language = StandardLanguage {
      name = "${baseName}.Format2"
      fileExtensions = "format"

      formatter = {
        generateStub = true
      }
      serializer = {
        generateStub = true
      }
      validator = {
        // composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
      }

      fragment = formatting.FormatterFragment2 {
        generateStub = true
      }
    }
  }
}
