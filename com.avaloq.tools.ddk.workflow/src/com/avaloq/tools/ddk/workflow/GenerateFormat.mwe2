/*******************************************************************************
 * Copyright (c) 2016 Avaloq Evolution AG and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Avaloq Evolution AG - initial API and implementation
 *******************************************************************************/
module Format

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*
import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

import com.avaloq.tools.ddk.xtext.generator.*

//var grammarURI = "classpath:/com/avaloq/tools/ddk/xtext/format/Format.xtext"
//var file.extensions = "format"
var projectName = "com.avaloq.tools.ddk.xtext.format"
var rootPath = ".."
var runtimeProject = "${rootPath}/${projectName}"

Workflow {
    bean = StandaloneSetup {
        scanClassPath = true
        platformUri = "${runtimeProject}/.."
        registerGeneratedEPackage = "org.eclipse.xtext.xbase.XbasePackage"
        registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
        registerGenModelFile = "platform:/resource/org.eclipse.xtext/org/eclipse/xtext/Xtext.genmodel"
        registerGenModelFile = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel"
    }

//    component = DirectoryCleaner {
//        directory = "${runtimeProject}/src-gen"
//    }
//
//    component = DirectoryCleaner {
//        directory = "${runtimeProject}.ui/src-gen"
//    }

  component = XtextGenerator {
    configuration = CustomGeneratorModule {
      project = model.project.CustomProjectConfig {
        baseName = projectName
        rootPath = rootPath
        createEclipseMetaData = true
        runtimeTest = {
          enabled = true
        }
        eclipsePlugin = {
          enabled = true
        }
        eclipsePluginTest = {
          enabled = true
        }
        genericIde = {
          enabled = true
        }
      }
      code = {
        encoding = "UTF-8"
        lineDelimiter = "\r\n"
        fileHeader = "/*\n * generated by Xtext \${version}\n */"
      }
    }
    language = StandardLanguage {
      name = "${projectName}.Format"
      fileExtensions = "format"

      contentAssist = {
        generateXtendStub = false
      }
      formatter = {
        generateStub = false
      }
      labelProvider = {
        generateXtendStub = false
      }
      outline = {
        generateXtendStub = false
      }
      quickFixProvider = {
        generateXtendStub = false
      }
      serializer = {
        generateStub = true
        generateXtendStub = false
      }
      validator = {
        // composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
      }

      fragment = formatting.FormatterFragment2 {
        generateStub = true
        generateXtendStub = false
      }
    }
  }

//    component = Generator {
//        pathRtProject = runtimeProject
//        pathUiProject = "${runtimeProject}.ui"
//        projectNameRt = projectName
//        projectNameUi = "${projectName}.ui"
//        language = {
//            uri = grammarURI
//            fileExtensions = file.extensions
//
//            // Java API to access grammar elements (required by several other fragments)
//            fragment = grammarAccess.GrammarAccessFragment {}
//
//            // generates Java API for the generated EPackages
//            fragment = ecore.EcoreGeneratorFragment {}
//
//            // the serialization component
//            fragment = serializer.SerializerFragment  {}
//
//            // a custom ResourceFactory for use with EMF
//            fragment = resourceFactory.ResourceFactoryFragment {
//                fileExtensions = file.extensions
//            }
//
//            // The antlr parser generator fragment.
//            fragment = parser.antlr.XtextAntlrGeneratorFragment {}
//
//            // java-based API for validation
//            fragment = validation.JavaValidatorFragment {}
//
//            // scoping and exporting API
//            fragment = scoping.ImportNamespacesScopingFragment {}
//            fragment = exporting.QualifiedNamesFragment {}
//            fragment = builder.BuilderIntegrationFragment {}
//
//            // formatter API
//            fragment = formatting.FormatterFragment {}
//
//            // labeling API
//            fragment = labeling.LabelProviderFragment {}
//
//            // outline API
//            fragment = outline.OutlineTreeProviderFragment {}
//            fragment = outline.QuickOutlineFragment {}
//
//            // quickfix API
//            fragment = quickfix.QuickfixProviderFragment {}
//
//            // content assist API
//            fragment = contentAssist.JavaBasedContentAssistFragment {}
//
//            // generates a more lightweight Antlr parser and lexer tailored for content assist
//            fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}
//
//            // Xbase support
//            fragment = types.TypesGeneratorFragment {}
//            fragment = xbase.XbaseGeneratorFragment {}
//
//            // Code generator
//            fragment = generator.GeneratorFragment {}
//
//            // provides a compare view
//            fragment = compare.CompareFragment {
//                fileExtensions = file.extensions
//            }
//
//        }
//    }
}
