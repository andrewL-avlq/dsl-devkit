/*
 * generated by Xtext 2.14.0
 */
package com.avaloq.tools.ddk.xtext.format2.ui.quickfix

import org.eclipse.xtext.xbase.annotations.ui.quickfix.XbaseWithAnnotationsQuickfixProvider
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.ui.editor.model.edit.IModification
import org.eclipse.jface.text.BadLocationException
import com.avaloq.tools.ddk.xtext.format2.validation.Format2Validator
import com.avaloq.tools.ddk.xtext.format2.format2.Rule
import org.eclipse.xtext.resource.XtextResource
import org.eclipse.xtext.util.concurrent.IUnitOfWork
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext
import org.eclipse.xtext.validation.Issue
import org.eclipse.xtext.ui.editor.quickfix.Fix

/**
 * Custom quickfixes.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
class Format2QuickfixProvider extends XbaseWithAnnotationsQuickfixProvider {

//	@Fix(Format2Validator.INVALID_NAME)
//	def capitalizeName(Issue issue, IssueResolutionAcceptor acceptor) {
//		acceptor.accept(issue, 'Capitalize name', 'Capitalize the name.', 'upcase.png') [
//			context |
//			val xtextDocument = context.xtextDocument
//			val firstLetter = xtextDocument.get(issue.offset, 1)
//			xtextDocument.replace(issue.offset, 1, firstLetter.toUpperCase)
//		]
//	}


  /**
   * Semantic quickfix removing the override flag for a rule.
   *
   * @param issue
   *          the issue
   * @param acceptor
   *          the acceptor
   */
  @Fix(Format2Validator.OVERRIDE_ILLEGAL_CODE)
  def void removeOverride(Issue issue, IssueResolutionAcceptor acceptor) {
    acceptor.accept(issue, "Remove override", "Remove override.", null, new IModification() {
      override apply(IModificationContext context) throws BadLocationException {
        context.getXtextDocument().modify(new IUnitOfWork.Void<XtextResource>() {
          override process(XtextResource state) {
            val rule = state.getEObject(issue.getUriToProblem().fragment()) as Rule
            rule.setOverride(false)
          }
        });
      }
    });
  }

  /**
   * Semantic quickfix setting the override flag for a rule.
   *
   * @param issue
   *          the issue
   * @param acceptor
   *          the acceptor
   */
  @Fix(Format2Validator.OVERRIDE_MISSING_CODE)
  def void setOverride(Issue issue, IssueResolutionAcceptor acceptor) {
    acceptor.accept(issue, "Set override", "Set override flag.", null, new IModification() {
      override apply(IModificationContext context) throws BadLocationException {
        context.getXtextDocument().modify(new IUnitOfWork.Void<XtextResource>() {
          override process(XtextResource state) {
            val rule = state.getEObject(issue.getUriToProblem().fragment()) as Rule
            rule.setOverride(true)
          }
        });
      }
    });
  }

  /**
   * Syntactic quickfix creating a rule.
   *
   * @param issue
   *          the issue
   * @param acceptor
   *          the acceptor
   */
  @Fix(Format2Validator.GRAMMAR_RULE_MISSING_CODE)
  def void addGrammarRule(Issue issue, IssueResolutionAcceptor acceptor) {
    acceptor.accept(issue, "Create rule", "Create rule " + issue.getData().get(0), null, new IModification() {
      override apply(IModificationContext context) throws BadLocationException {
        val xtextDocument = context.getXtextDocument()
        xtextDocument.replace(xtextDocument.getLength(), 0, "\n" + issue.getData().get(0) + " {\n\t\n}")
      }
    });
  }
}
