/*
 * generated by Xtext 2.14.0
 */
package com.avaloq.tools.ddk.xtext.format2.formatting

import com.avaloq.tools.ddk.xtext.format2.services.Format2GrammarAccess
import com.google.inject.Inject

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig
import com.avaloq.tools.ddk.xtext.format2.services.Format2GrammarAccess.GrammarRuleElements
import com.avaloq.tools.ddk.xtext.format2.services.Format2GrammarAccess.KeywordPairElements
import org.eclipse.xtext.Keyword
import org.eclipse.xtext.util.Pair
import org.eclipse.xtext.TerminalRule
import com.avaloq.tools.ddk.xtext.format2.services.Format2GrammarAccess.WildcardRuleElements

/**
 * This class contains custom formatting declarations.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#formatting
 * on how and when to use it.
 *
 * Also see {@link org.eclipse.xtext.xtext.XtextFormatter} as an example
 */
class Format2Formatter extends AbstractDeclarativeFormatter {

  @Inject extension Format2GrammarAccess

  static val LINE_LENGTH = 120

  override protected void configureFormatting(FormattingConfig config) {
    config.setAutoLinewrap(LINE_LENGTH)

    config.setLinewrap().before(formatConfigurationAccess.getGroup_4())

    for (Pair<Keyword, Keyword> pair : findKeywordPairs("{", "}")) {
      config.setIndentationIncrement().after(pair.getFirst())
      config.setLinewrap().after(pair.getFirst())
      config.setIndentationDecrement().before(pair.getSecond())
      config.setLinewrap().after(pair.getSecond())
    }

    for (Pair<Keyword, Keyword> pair : findKeywordPairs("[", "]")) {
      config.setNoSpace().after(pair.getFirst())
      config.setNoSpace().before(pair.getSecond())
    }

    for (Keyword keyword : findKeywords(";")) {
      config.setLinewrap().after(keyword)
      config.setNoSpace().before(keyword)
    }

    for (Keyword keyword : findKeywords(",")) {
      config.setNoSpace().before(keyword)
    }

    for (Keyword keyword : findKeywords("=", "@")) {
      config.setSpace("").after(keyword)
    }

    configComments(config, ML_COMMENTRule, SL_COMMENTRule)
    configConstants(config)
    configGrammarRule(config, grammarRuleAccess)
    configWildcardRule(config, wildcardRuleAccess)
    configKeywordPair(config, keywordPairAccess)
  }

  /**
   * Configure formatting for ML and SL comments.
   *
   * @param config
   *          the FormattingConfig
   * @param mlRule
   *          the ML terminal access
   * @param slRule
   *          the SL terminal access
   */
  def private void configComments(FormattingConfig config, TerminalRule mlRule, TerminalRule slRule) {
    config.setLinewrap(0, 1, 2).before(slRule);
    config.setLinewrap(0, 1, 2).before(mlRule);
    config.setLinewrap().after(mlRule);
  }

  /**
   * Configure formatting for constant declarations.
   *
   * @param config
   *          the FormattingConfig
   * @param grammarAccess
   *          the grammar access
   */
  def private void configConstants(FormattingConfig config) {
    config.setLinewrap(2).between(formatConfigurationAccess.getTargetGrammarAssignment_2(), formatConfigurationAccess.getGroup_5());
    config.setLinewrap().before(formatConfigurationAccess.getConstKeyword_5_0());
    config.setSpace(" ").around(constantAccess.getEqualsSignKeyword_2());
  }

  /**
   * Configure formatting for GrammarRule.
   *
   * @param config
   *          the FormattingConfig
   * @param elements
   *          the GrammarRule access
   */
  def private void configGrammarRule(FormattingConfig config, GrammarRuleElements elements) {
    config.setLinewrap(2).before(elements.getOverrideOverrideKeyword_0_0());
    config.setSpace(" ").between(elements.getOverrideOverrideKeyword_0_0(), elements.getTargetRuleAssignment_1()); // prevent linewrap between override and rule
    config.setLinewrap(2).before(elements.getTargetRuleAssignment_1());
  }

  /**
   * Configure formatting for WildcardRule.
   *
   * @param config
   *          the FormattingConfig
   * @param elements
   *          the WildcardRule access
   */
  def private void configWildcardRule(FormattingConfig config, WildcardRuleElements elements) {
    config.setLinewrap(2).before(elements.getOverrideOverrideKeyword_1_0());
    config.setSpace(" ").between(elements.getOverrideOverrideKeyword_1_0(), elements.getAsteriskKeyword_2()); // prevent linewrap between override and *
    config.setLinewrap(2).before(elements.getAsteriskKeyword_2());
  }

  /**
   * Configure formatting for KeywordPair.
   *
   * @param config
   *          the FormattingConfig
   * @param elements
   *          the KeywordPair access
   */
  def private void configKeywordPair(FormattingConfig config, KeywordPairElements elements) {
    for (Keyword keyword : elements.findKeywords(".")) {
      config.setNoSpace().around(keyword);
    }
    config.setNoSpace().after(elements.getLeftParenthesisKeyword_0());
    config.setNoSpace().before(elements.getRightParenthesisKeyword_3());
  }
}
